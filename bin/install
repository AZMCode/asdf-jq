#!/usr/bin/env bash

# Shamelessly stolen from https://github.com/beardix/asdf-yq/blob/master/bin/list-all#L7
# Thank you for your great and simple work

set -o errexit
set -o nounset
set -o pipefail

readonly BINARY_NAME="jq"
readonly RELEASES_URL="https://api.github.com/repos/stedolan/jq/releases"
readonly DOWNLOAD_BASE_URL="https://github.com/stedolan/jq/releases/download"

readonly TMP_DOWNLOAD_DIR="$(mktemp -d)"
trap 'rm -rf "${TMP_DOWNLOAD_DIR?}"' EXIT

error_exit() {
  echo "$1" >&2
  exit "${2:-1}"
}

get_platform() {
  local -r os=$(
    case "$(uname | tr '[:upper:]' '[:lower:]')" in
      darwin) echo "osx" ;;
      *) echo "linux" ;;
    esac
  )

  echo "${os}"
  return
}
get_arch(){
  declare arch="$(uname -m)"
  if [ "$arch" == 'x86_64' ]; then
    echo '64'
  elif [ "$arch" == 'i386' ]; then
    echo '32'
  elif [ "$arch" == 'i686' ]; then
    echo '32'
  else
    error_exit 'There are no official releases for your architecture'
  fi
  return
}

get_assets_url() {
  declare install_version="$1"

  declare releases_json=$(curl -s "$RELEASES_URL")

  declare -a asset_urls=($(echo $releases_json | grep -oP "(?<=\"assets_url\": \")[^\"]{8,}(?=\",)"))
  declare -a tag_names=( $(echo $releases_json | grep -oP "(?<=\"tag_name\": \")[^\"]{3,}(?=\",)"))

  for ((index=0; index<${#tag_names[@]}; index++)); do
    if [ "${tag_names[$index]}" = "$install_version" ]; then
      echo "${asset_urls[$index]}"
      return
    fi
  done
  error_exit 'Given version did not match any releases. Try list-all to see available options'
}
find_all_asset_names() {
  declare install_version="$1"

  declare assets_url="$(get_assets_url $install_version)"
  if [ "$assets_url" == "" ]; then
    error_exit "No URL found to release $install_version"
  fi
  declare assets_json="$(curl -s $assets_url)"
  declare -a asset_names=($(echo $assets_json | grep -oP "(?<=\"name\": \")[^\"]{3,}(?=\",)"))
  echo ${asset_names[@]}
  return
}
filter_assets() {
  declare -a inArr=($1)
  declare -a outArr=()

  declare platform="$2"
  declare arch="$3"
  for i in "${inArr[@]}"; do
    if [ "$arch" == "32" ]; then
      declare filteredString=$(echo "$i" | grep -oP "$platform.*((86(?!_64))|32)")
    else
      declare filteredString=$(echo "$i" | grep -oP "$platform.*(64)")
    fi
    if [ "$filteredString" != "" ]; then
      outArr+=("$i")
    fi
  done
  echo "${outArr[@]}"
}
find_file_name() {
  declare install_version="$1"
  declare arch="$(get_arch)"
  declare platform="$(get_platform)"
  
  declare assets="$(find_all_asset_names "$install_version")"  
  declare -a usableAssets=($(filter_assets "$assets" "$platform" "$arch"))
    
  case "${#usableAssets[@]}" in
    "0")
      error_exit "No releases in version $install_version matching $platform $arch-bits"
      ;;
    "1")
      ;;
    *)
      echo "${usableAssets[@]}" >&2
      echo "Multiple releases found matching $platform $arch-bits, choosing first" >&2
      ;;
  esac
  
  echo "${usableAssets[0]}"
}
install() {
  local -r install_type="$1"
  local -r install_version="$2"
  local -r install_path="$3"
  local -r install_path_bin="${install_path}/bin"
  declare file_name="$(find_file_name "$install_version")"
  if [ "$file_name" == "" ]; then
    error_exit "Could not download release"
  fi
  local -r download_url="${DOWNLOAD_BASE_URL}/${install_version}/${file_name}"
  local -r download_path="${TMP_DOWNLOAD_DIR}/${BINARY_NAME}"

  [ "$install_type" != "version" ] && error_exit "Error: source installs are not supported"

  echo "Downloading from ${download_url}"
  if curl -fL -o "$download_path" "$download_url"; then
    echo "Installing binary"
    mkdir -p "$install_path_bin"
    mv "$download_path" "${install_path_bin}/${BINARY_NAME}"
    chmod +x "${install_path_bin}/${BINARY_NAME}"
  else
    error_exit "Error: ${BINARY_NAME} version ${install_version} not found"
  fi
}

#
install "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
