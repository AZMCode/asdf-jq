
#!/usr/bin/env bash

# Shamelessly stolen from https://github.com/beardix/asdf-yq/blob/master/bin/list-all#L7
# Thank you for your great and simple work

set -o errexit
set -o nounset
set -o pipefail

readonly BINARY_NAME="jq"
readonly RELEASES_URL="https://api.github.com/repos/stedolan/jq/releases"

readonly TMP_DOWNLOAD_DIR="$(mktemp -d)"
trap 'rm -rf "${TMP_DOWNLOAD_DIR?}"' EXIT

error_exit() {
  echo "$1" >&2
  exit "${2:-1}"
}

get_platform() {
  local testStr="$(uname | tr '[:upper:]' '[:lower:]')"
  if [ "$testStr" == "darwin" ]; then
    echo "osx"
  else
    echo "linux"
  fi
  return
}
get_arch(){
  declare arch="$(uname -m)"
  if [ "$arch" == 'x86_64' ]; then
    echo '64'
  elif [ "$arch" == 'i386' ]; then
    echo '32'
  elif [ "$arch" == 'i686' ]; then
    echo '32'
  else
    error_exit 'Sadly, there are no official releases for your architecture'
  fi
  return
}

get_assets_url() {
  declare install_version="$1"

  declare releases_json=$(curl -s "$RELEASES_URL")
  declare -a asset_urls=($(echo "$releases_json" | sed -n -E 's/\s*"assets_url":\s*"([^"]*)".*/\1/p'))
  declare -a tag_names=($(echo "$releases_json"  | sed -n -E 's/\s*"tag_name":\s*"([^"]*)".*/\1/p'))

  for i in "${!tag_names[@]}"; do
    if [ "${tag_names[$i]}" == "jq-$install_version" ]; then
      echo "${asset_urls[$i]}"
      return
    fi
  done

  error_exit  "Given version '$install_version' did not match any releases. Try list-all to see available options"
}
find_all_asset_names() {
  declare install_version="$1"

  declare assets_url="$(get_assets_url "$install_version")"
  if [ -z "$assets_url" ]; then
    error_exit "No URL found for release $install_version"
  fi
  declare assets_json="$(curl -s "$assets_url")"
  declare -a output=($(echo "$assets_json" | sed -n -E 's/\s*"browser_download_url":\s{0,2}"([^"]{8,})"/\1/p'))
  echo "${output[@]}"
}
filter_assets() {
  declare -a inArr=($@)
  declare platform="$(get_platform)";
  declare arch="$(get_arch)"
  declare -a filteredArr=()
  for i in "${inArr[@]}"; do
    if [ "$arch" == "32" ]; then
      declare filteredUrl="$(echo "$i" | sed -n -E "/.*$platform.*(86|32)/p" | sed -n -E '/.*86_64.*/!p')"
      declare canPass="$(echo "$filteredUrl" | sed -n -E 's/.*\S.*/true/p')"
      if [ "$canPass" == "true" ]; then
        filteredArr+=("$filteredUrl")
      fi
    else
      declare filteredUrl="$(echo "$i" | sed -n -E "/$platform.*(64)/p")"
      declare canPass="$(echo "$filteredUrl" | sed -n -E 's/.*\S.*/true/p')"
      if [ "$canPass" == "true" ]; then
        filteredArr+=("$filteredUrl")
      fi
    fi
  done
  echo "${filteredArr[@]}"
}
find_file_url() {
  declare install_version="$1"
  declare arch="$(get_arch)"
  declare platform="$(get_platform)"
  declare -a assets=($(find_all_asset_names "$install_version"))
  declare -a usableAssets=( "$(filter_assets "${assets[@]}")" )

  if [ "${#usableAssets[@]}" == 0 ]; then
    error_exit "No releases in version $install_version matching $platform $arch-bits"
  elif [ "${#usableAssets[@]}" -gt 1  ]; then
    echo "Multiple releases found matching $platform $arch-bits, choosing first" >&2
  fi

  echo "${usableAssets[0]}"
}
install() {
  local -r install_type="$1"
  local -r install_version="$2"
  local -r install_path="$3"
  local -r install_path_bin="${install_path}/bin"
  local -r download_url="$(find_file_url "$install_version")"
  if [ -z "$download_url" ]; then
    error_exit "Malformed URL"
  fi
  local -r download_path="${TMP_DOWNLOAD_DIR}/${BINARY_NAME}"

  [ "$install_type" != "version" ] && error_exit "Error: source installs are not supported"

  echo "Downloading from ${download_url}" >&2
  curl -fL -o "$download_path" "$download_url"
  if [ $? -eq 0 ]; then
    echo "Installing binary" >&2
    mkdir -p "$install_path_bin"
    mv "$download_path" "${install_path_bin}/${BINARY_NAME}"
    chmod +x "${install_path_bin}/${BINARY_NAME}"
  else
    error_exit "Error: ${BINARY_NAME} version ${install_version} not found"
  fi
}


install "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
#install version 1.6 ~/.asdf/install
